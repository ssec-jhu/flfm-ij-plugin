name: CI

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
    branches:
      - '*'

jobs:
  lint:
    name: Lint and format with Maven
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'
          cache: 'maven'
      - name: Run Checkstyle
        run: mvn -B checkstyle:check --file flfm-ij/pom.xml
      - name: Run Spotless
        run: mvn -B spotless:check --file flfm-ij/pom.xml

  test:
    name: Test with Maven
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'
          cache: 'maven'
      - name: Build and run tests
        run: mvn -B clean test --file flfm-ij/pom.xml
      - name: Archive coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: flfm-ij/target/site/jacoco/jacoco.xml
          retention-days: 7
          if-no-files-found: error
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
         token: ${{ secrets.CODECOV_TOKEN }}
         files: flfm-ij/target/site/jacoco/jacoco.xml
         flags: unittests
         name: codecov-umbrella
         verbose: true
         fail_ci_if_error: true

  build:
    name: Build JAR with Maven
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'
          cache: 'maven'
      - name: Build JAR
        run: mvn -B package --file flfm-ij/pom.xml
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: flfm-ij-plugin-jar
          path: flfm-ij/target/*.jar

  # publish:
  #   name: Publish Docker image
  #   runs-on: ubuntu-latest
  #   needs: build
  #   permissions:
  #     contents: read
  #     packages: write
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3
  #     - name: Log in to the Container registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         push: true
  #         tags: ghcr.io/${{ github.repository }}:latest
